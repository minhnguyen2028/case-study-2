%% Case Study 2: COVID Dynamic System
%% Part 2: Fitting the SIRD Model to Real Data
% *ESE 105*
% 
% *Names: Minh Duc Nguyen, Hussain Akbotabeekh, Shaaf Afzal*
%

clear;
close all;
load COVID_STL.mat;
load mockdata.mat; 


%% Step 1: Additional Vectors and Graph Analysis

%%%
% *******************************************************************
% Creates difference data; rate at which cases increase from one day to 
% the next (i.e. # of new cases per day), same with death count
weeklyNewCases = zeros(size(cases_STL));
for i = 2:(size(cases_STL, 2))
    weeklyNewCases(i) = cases_STL(i)-cases_STL(i-1);
end

weeklyNewDeaths = zeros(size(deaths_STL));
for i = 2:(size(deaths_STL, 2))
    weeklyNewDeaths(i) = deaths_STL(i)-deaths_STL(i-1);
end

% Smooths out rate data a bit
weeklyNewCases = smoothdata(weeklyNewCases, 2, "movmean", 2);
weeklyNewDeaths = smoothdata(weeklyNewDeaths, 2, "movmean", 2);

% Extra info: population over 2020-2023
% St. Louis County:
%   - 2020: 1,004,125
%   - 2021: 1,002,000
%   - 2022: 990,414
%   - 2023: 987,059
% St. Louis City:
%   - 2020: 301,578
%   - 2021: 293,310
%   - 2022: 286,578
%   - 2023: 281,754
% Total STL Population (county + city):
%   - 2020: 1,305,703
%   - 2021: 1,295,310
%   - 2022: 1,276,992
%   - 2023: 1,268,813

% Find cumulative population decline each year over the 4 years:
pop4yr = [1305703 1295310 1276992 1268813];
popDecline = zeros(1, 3);
for i = 1:3
    popDecline(i) = abs(pop4yr(i+1) - pop4yr(i));
end

% Spread out decline over a year (52 weeks) 
popDeclineYear = zeros(1, size(dates, 2));
popDeclineYear(1:52) = popDecline(1)/52;
popDeclineYear(53:105) = popDecline(2)/52;
popDeclineYear(106:158) = popDecline(3)/52;

% Create adjusted population vector; used to ensure a more accurate
% population percentage value for the calculated SIRD values/curves
POP_STL_adjusted = zeros(1, size(dates, 2));
POP_STL_adjusted(1) = POP_STL;
for i = 2:size(POP_STL_adjusted, 2)
    POP_STL_adjusted(i) = POP_STL_adjusted(i-1) - popDeclineYear(i);
end

% Create a new cumulative cases vector as a percentage of the time-varying
% total population; same w/ death vector
cases_STL_percentage = cases_STL./POP_STL_adjusted;
deaths_STL_percentage = deaths_STL./POP_STL_adjusted;

% Plots actual case data (for reference) 
figure;
plot(dates, cases_STL, "Color", 'blue'); 
hold on;
plot(dates, deaths_STL, "Color", 'red');
title("Actual STL Cases Data");
xlabel("Time");
ylabel("Total Count");
legend('Cumulative Cases', 'Cumulative Deaths'); 
hold off;

% Plots derived rate data
figure;
plot(dates, weeklyNewCases, "Color", 'blue');
title("STL New Weekly Cases");
xlabel("Time");
ylabel("Total Count");
legend('Weekly Case Count');

figure;
plot(dates, weeklyNewDeaths, "Color", 'red');
title("STL New Weekly Deaths");
xlabel("Time");
ylabel("Total Count");
legend('Weekly Death Count');
% *******************************************************************


%% Step 2: Establish SIRD Parameters and Tuning for Distinct Phases

%%%
% *******************************************************************
% Separate data into 4 distinct phases of the pandemic:
%   - Phase 1: Initial Outbreak (3/18/20 - 6/23/21) (i = 1:67)
%   - Phase 2: Delta Varient (6/30/21 - 10/20/21) (i = 68:84)
%   - Phase 3: Omicron Varient (10/27/21 - 3/23/22) (i = 85:106)
%   - Phase 4: Remaining Weeks (3/30/22 - 3/22/23) (i = 107:158)
timeInitial = 1:1:67;             % For lsim purposes
timeInitialWeeks = dates(1:67);   % For plotting purposes

timeDelta = 68:1:84;
timeDeltaWeeks = dates(68:84);

timeOmicron = 85:1:106;
timeOmicronWeeks = dates(85:106);

timeRemain = 107:1:158;
timeRemainWeeks = dates(107:158);

% Set up SIRD rate-constants and initial values for the initial phase
% Find active cases + averages: 
% Recovered pop: assuming rec. time of 4 weeks (shift for 4-week delay) 
recTime1 = 4;
weeklyRecovered1 = zeros(1, size(timeInitial, 2));
for i = (recTime1+1):size(timeInitial, 2)
    weeklyRecovered1(i) = weeklyNewCases(i-recTime1) - weeklyNewDeaths(i-recTime1);
end
activeCases1 = cases_STL(timeInitial) - deaths_STL(timeInitial) - weeklyRecovered1; 
weeklyNewActive1 = zeros(1, size(timeInitial, 2));
for i = 2:size(timeInitial, 2)
    weeklyNewActive1(i) = activeCases1(i) - activeCases1(i-1);
end
aveActiveCases1 = mean(activeCases1);
aveWeeklyRecovered1 = mean(weeklyRecovered1);
   
% Calculates parameters using the following logic (over phase 1): 
%  - I = average new infections / average susceptible population
%  - R = average recovered / average active cases
%  - D = total deaths @ end of phase / average population
%  - S = remainder; 1 - I - R - D 
Ii = mean(weeklyNewCases(timeInitial))/mean(POP_STL_adjusted(timeInitial));
Ri = aveWeeklyRecovered1/aveActiveCases1;
Di = sum(weeklyNewDeaths(timeInitial))/mean(POP_STL_adjusted(timeInitial));
Si = 1-Ii-Ri-Di;

SiInit = 1;  % Assumes everyone is susceptible at the start; no cases yet
IiInit = 0;
RiInit = 0;
DiInit = 0;
XiInit = [SiInit; IiInit; RiInit; DiInit];

% Phase 1: Initial outbreak
% Set up natural evolution matrix A (base model; no additional states)
Ai = [1-Ii    0     0     0;
       Ii  1-Ri-Di  0     0;
       0      Ri    1     0;
       0      Di    0     1];

% Other lsim matrices set up
B = zeros(4, 1);
Iden = eye(4);

% lsim set up and execution
D_i = ss(Ai, B, Iden, B, 1);
Yi = lsim(D_i, zeros(size(timeInitial, 2), 1), timeInitial, XiInit)';

% Get cumulative cases vector, calculated using:
%   Cumulative Cases = Infected + Recovered + Deceased
cum_i = zeros(1, size(timeInitial, 2));
for i = 1:size(timeInitial, 2) 
    cum_i(i) = Yi(2, i) + Yi(3, i) + Yi(4, i);
end

% Plot the output matrix alongside the original cumulative count/death 
% vector and the calculated cumulative cases vector for this phase
figure; 
hold on;
plot(timeInitialWeeks, Yi(1, :), "Color", 'blue');
plot(timeInitialWeeks, Yi(2, :), "Color", 'red');
plot(timeInitialWeeks, Yi(3, :), "Color", '#588970');
plot(timeInitialWeeks, Yi(4, :), "Color", 'black');
plot(timeInitialWeeks, cum_i, "Color", 'cyan', "LineWidth", 1);
plot(timeInitialWeeks, cases_STL_percentage(timeInitial), "Color", 'magenta', "LineStyle", "--");
plot(timeInitialWeeks, deaths_STL_percentage(timeInitial), "Color", '#8B0000', "LineStyle", "--");
legend('S', 'I', 'R', 'D', 'Cumulative Cases (model)', 'Cumulative Cases (actual)', 'Cumulative Deaths (actual)');
title("Cumulative Case and Death Counts vs. SIRD Model Projections Curves (PHASE 1)");
xlabel("Time (weeks)");
ylabel("Percentage of Total Population");

% Repeat process for the other 4 phases:

% Phase 2: Delta Varient
% Set up SIRD rate-constants and initial values for the initial phase
% Note: calculated using the same method as in phase 1 (initial)

% Assumes recovery time ~3 weeks;
recTime2 = 3;
weeklyRecovered2 = zeros(1, size(timeDelta, 2));
for i = (recTime2+1):size(timeDelta, 2)
    weeklyRecovered2(i) = weeklyNewCases(timeDelta(i)-recTime2) - weeklyNewDeaths(timeDelta(i)-recTime2);
end
activeCases2 = cases_STL(timeDelta) - deaths_STL(timeDelta) - cumsum(weeklyRecovered2); 
weeklyNewActive2 = zeros(1, size(timeDelta, 2));
for i = 2:size(timeDelta, 2)
    weeklyNewActive2(i) = activeCases2(i) - activeCases2(i-1);
end
aveActiveCases2 = mean(activeCases2);
aveWeeklyRecovered2 = mean(weeklyRecovered2);
% Calculates the susceptible population based on the average previous
% population
aveSusceptible2 = mean(Yi(1, :));
aveInfected2 = mean(Yi(2, :));

Id = mean(weeklyNewCases(timeDelta))/((aveSusceptible2*mean(POP_STL_adjusted(timeDelta))));
Rd = aveWeeklyRecovered2/aveActiveCases2;
Dd = sum(weeklyNewDeaths(timeDelta))/mean(POP_STL_adjusted(timeDelta));
Sd = 1-Id-Rd-Dd;

% Initial values based on the final state vector of the previous phase
SdInit = Yi(1, size(Yi, 2)); 
IdInit = Yi(2, size(Yi, 2));
RdInit = Yi(3, size(Yi, 2));
DdInit = Yi(4, size(Yi, 2));
XdInit = [SdInit; IdInit; RdInit; DdInit];

% Set up natural evolution matrix A (base model; no additional states)
Ad = [1-Id    0     0     0;
       Id  1-Rd-Dd  0     0;
       0      Rd    1     0;
       0      Dd    0     1];

% lsim set up and execution
D_d = ss(Ad, B, Iden, B, 1);
Yd = lsim(D_d, zeros(size(timeDelta, 2), 1), timeDelta, XdInit)';

% Get cumulative cases vector, calculated using:
%   Cumulative Cases = Infected + Recovered + Deceased
cum_d = zeros(1, size(timeDelta, 2));
for i = 1:size(timeDelta, 2) 
    cum_d(i) = Yd(2, i) + Yd(3, i) + Yd(4, i);
end

% Plot the output matrix alongside the original cumulative count/death 
% vector and the calculated cumulative cases vector for this phase
figure; 
hold on;
plot(timeDeltaWeeks, Yd(1, :), "Color", 'blue');
plot(timeDeltaWeeks, Yd(2, :), "Color", 'red');
plot(timeDeltaWeeks, Yd(3, :), "Color", '#588970');
plot(timeDeltaWeeks, Yd(4, :), "Color", 'black');
plot(timeDeltaWeeks, cum_d, "Color", 'cyan', "LineWidth", 1);
plot(timeDeltaWeeks, cases_STL_percentage(timeDelta), "Color", 'magenta', "LineStyle", "--");
plot(timeDeltaWeeks, deaths_STL_percentage(timeDelta), "Color", '#8B0000', "LineStyle", "--");
legend('S', 'I', 'R', 'D', 'Cumulative Cases (model)', 'Cumulative Cases (actual)', 'Cumulative Deaths (actual)');
title("Cumulative Case and Death Counts vs. SIRD Model Projections Curves (PHASE 2)");
xlabel("Time (weeks)");
ylabel("Percentage of Total Population");

% Phase 3: Omicron Varient
% Assumes recovery time ~3 weeks;
recTime3 = 3;
weeklyRecovered3 = zeros(1, size(timeOmicron, 2));
for i = (recTime3+1):size(timeOmicron, 2)
    weeklyRecovered3(i) = weeklyNewCases(timeOmicron(i)-recTime3) - weeklyNewDeaths(timeOmicron(i)-recTime3);
end
activeCases3 = cases_STL(timeOmicron) - deaths_STL(timeOmicron) - cumsum(weeklyRecovered3); 
weeklyNewActive3 = zeros(1, size(timeOmicron, 2));
for i = 2:size(timeOmicron, 2)
    weeklyNewActive3(i) = activeCases3(i) - activeCases3(i-1);
end
aveActiveCases3 = mean(activeCases3);
aveWeeklyRecovered3 = mean(weeklyRecovered3);
% Calculates the susceptible population based on the average previous
% population
aveSusceptible3 = mean(Yd(1, :));
aveInfected3 = mean(Yd(2, :));

Io = mean(weeklyNewCases(timeOmicron))/((aveSusceptible3*mean(POP_STL_adjusted(timeOmicron))));
Ro = aveWeeklyRecovered3/aveActiveCases3;
Do = sum(weeklyNewDeaths(timeOmicron))/mean(POP_STL_adjusted(timeOmicron));
So = 1-Io-Ro-Do;

% Initial values based on the final state vector of the previous phase
SoInit = Yd(1, size(Yd, 2)); 
IoInit = Yd(2, size(Yd, 2));
RoInit = Yd(3, size(Yd, 2));
DoInit = Yd(4, size(Yd, 2));
XoInit = [SoInit; IoInit; RoInit; DoInit];

% Set up natural evolution matrix A (base model; no additional states)
Ao = [1-Io    0     0     0;
       Io  1-Ro-Do  0     0;
       0      Ro    1     0;
       0      Do    0     1];

% lsim set up and execution
D_o = ss(Ao, B, Iden, B, 1);
Yo = lsim(D_o, zeros(size(timeOmicron, 2), 1), timeOmicron, XoInit)';

% Get cumulative cases vector, calculated using:
%   Cumulative Cases = Infected + Recovered + Deceased
cum_o = zeros(1, size(timeOmicron, 2));
for i = 1:size(timeOmicron, 2) 
    cum_o(i) = Yo(2, i) + Yo(3, i) + Yo(4, i);
end

% Plot the output matrix alongside the original cumulative count/death 
% vector and the calculated cumulative cases vector for this phase
figure; 
hold on;
plot(timeOmicronWeeks, Yo(1, :), "Color", 'blue');
plot(timeOmicronWeeks, Yo(2, :), "Color", 'red');
plot(timeOmicronWeeks, Yo(3, :), "Color", '#588970');
plot(timeOmicronWeeks, Yo(4, :), "Color", 'black');
plot(timeOmicronWeeks, cum_o, "Color", 'cyan', "LineWidth", 1);
plot(timeOmicronWeeks, cases_STL_percentage(timeOmicron), "Color", 'magenta', "LineStyle", "--");
plot(timeOmicronWeeks, deaths_STL_percentage(timeOmicron), "Color", '#8B0000', "LineStyle", "--");
legend('S', 'I', 'R', 'D', 'Cumulative Cases (model)', 'Cumulative Cases (actual)', 'Cumulative Deaths (actual)');
title("Cumulative Case and Death Counts vs. SIRD Model Projections Curves (PHASE 3)");
xlabel("Time (weeks)");
ylabel("Percentage of Total Population");

% Phase 4: Remaining Cases
% Assumes recovery time ~2 weeks;
recTime4 = 2;
weeklyRecovered4 = zeros(1, size(timeRemain, 2));
for i = (recTime4+1):size(timeRemain, 2)
    weeklyRecovered4(i) = weeklyNewCases(timeRemain(i)-recTime4) - weeklyNewDeaths(timeRemain(i)-recTime4);
end
activeCases4 = cases_STL(timeRemain) - deaths_STL(timeRemain) - cumsum(weeklyRecovered4); 
weeklyNewActive4 = zeros(1, size(timeRemain, 2));
for i = 2:size(timeRemain, 2)
    weeklyNewActive4(i) = activeCases4(i) - activeCases4(i-1);
end
aveActiveCases4 = mean(activeCases4);
aveWeeklyRecovered4 = mean(weeklyRecovered4);
% Calculates the susceptible population based on the average previous
% population
aveSusceptible4 = mean(Yo(1, :));
aveInfected4 = mean(Yo(2, :));

Ir = mean(weeklyNewCases(timeRemain))/((aveSusceptible4*mean(POP_STL_adjusted(timeRemain))));
Rr = aveWeeklyRecovered4/aveActiveCases4;
Dr = sum(weeklyNewDeaths(timeRemain))/mean(POP_STL_adjusted(timeRemain));
Sr = 1-Ir-Rr-Dr;

% Initial values based on the final state vector of the previous phase
SrInit = Yo(1, size(Yo, 2)); 
IrInit = Yo(2, size(Yo, 2));
RrInit = Yo(3, size(Yo, 2));
DrInit = Yo(4, size(Yo, 2));
XrInit = [SrInit; IrInit; RrInit; DrInit];

% Set up natural evolution matrix A (base model; no additional states)
Ar = [1-Ir    0     0     0;
       Ir  1-Rr-Dr  0     0;
       0      Rr    1     0;
       0      Dr    0     1];

% lsim set up and execution
D_r = ss(Ar, B, Iden, B, 1);
Yr = lsim(D_r, zeros(size(timeRemain, 2), 1), timeRemain, XrInit)';

% Get cumulative cases vector, calculated using:
%   Cumulative Cases = Infected + Recovered + Deceased
cum_r = zeros(1, size(timeRemain, 2));
for i = 1:size(timeRemain, 2) 
    cum_r(i) = Yr(2, i) + Yr(3, i) + Yr(4, i);
end

% Plot the output matrix alongside the original cumulative count/death 
% vector and the calculated cumulative cases vector for this phase
figure; 
hold on;
plot(timeRemainWeeks, Yr(1, :), "Color", 'blue');
plot(timeRemainWeeks, Yr(2, :), "Color", 'red');
plot(timeRemainWeeks, Yr(3, :), "Color", '#588970');
plot(timeRemainWeeks, Yr(4, :), "Color", 'black');
plot(timeRemainWeeks, cum_r, "Color", 'cyan', "LineWidth", 1);
plot(timeRemainWeeks, cases_STL_percentage(timeRemain), "Color", 'magenta', "LineStyle", "--");
plot(timeRemainWeeks, deaths_STL_percentage(timeRemain), "Color", '#8B0000', "LineStyle", "--");
legend('S', 'I', 'R', 'D', 'Cumulative Cases (model)', 'Cumulative Cases (actual)', 'Cumulative Deaths (actual)');
title("Cumulative Case and Death Counts vs. SIRD Model Projections Curves (PHASE 4)");
xlabel("Time (weeks)");
ylabel("Percentage of Total Population");

% Concatenates output matrices together, then plots the result
Ycat = cat(2, Yi, Yd, Yo, Yr);
cum_concat = cat(2, cum_i, cum_d, cum_o, cum_r);

figure; 
hold on;
plot(dates, Ycat(1, :), "Color", 'blue');
plot(dates, Ycat(2, :), "Color", 'red');
plot(dates, Ycat(3, :), "Color", '#588970');
plot(dates, Ycat(4, :), "Color", 'black');
plot(dates, cum_concat, "Color", 'cyan', "LineWidth", 1);
plot(dates, cases_STL_percentage, "Color", 'magenta', "LineStyle", "--");
plot(dates, deaths_STL_percentage, "Color", '#8B0000', "LineStyle", "--");
legend('S', 'I', 'R', 'D', 'Cumulative Cases (model)', 'Cumulative Cases (actual)', 'Cumulative Deaths (actual)');
title("Cumulative Case and Death Counts vs. SIRD Model Projections Curves");
xlabel("Time (weeks)");
ylabel("Percentage of Total Population");
% *******************************************************************
